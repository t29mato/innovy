//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 46 images.
  struct image {
    /// Image `ArticleDetailBackButton`.
    static let articleDetailBackButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArticleDetailBackButton")
    /// Image `ArticleDetailClipOffButton`.
    static let articleDetailClipOffButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArticleDetailClipOffButton")
    /// Image `ArticleDetailClipOnButton`.
    static let articleDetailClipOnButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArticleDetailClipOnButton")
    /// Image `ArticleDetailShareButton`.
    static let articleDetailShareButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArticleDetailShareButton")
    /// Image `ArticleDetailShareOpenSafari`.
    static let articleDetailShareOpenSafari = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArticleDetailShareOpenSafari")
    /// Image `ArticleDetailTwitterButton`.
    static let articleDetailTwitterButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArticleDetailTwitterButton")
    /// Image `CommonArticlePlaceholder`.
    static let commonArticlePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonArticlePlaceholder")
    /// Image `CommonNavigationTitle`.
    static let commonNavigationTitle = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonNavigationTitle")
    /// Image `CommonSpeechStop`.
    static let commonSpeechStop = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonSpeechStop")
    /// Image `EtcCacheClear`.
    static let etcCacheClear = Rswift.ImageResource(bundle: R.hostingBundle, name: "EtcCacheClear")
    /// Image `EtcDispArticleNum`.
    static let etcDispArticleNum = Rswift.ImageResource(bundle: R.hostingBundle, name: "EtcDispArticleNum")
    /// Image `EtcDispThumbnail`.
    static let etcDispThumbnail = Rswift.ImageResource(bundle: R.hostingBundle, name: "EtcDispThumbnail")
    /// Image `EtcInquiry`.
    static let etcInquiry = Rswift.ImageResource(bundle: R.hostingBundle, name: "EtcInquiry")
    /// Image `EtcNextPage`.
    static let etcNextPage = Rswift.ImageResource(bundle: R.hostingBundle, name: "EtcNextPage")
    /// Image `EtcSpeech`.
    static let etcSpeech = Rswift.ImageResource(bundle: R.hostingBundle, name: "EtcSpeech")
    /// Image `LaunchScreenLogo`.
    static let launchScreenLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreenLogo")
    /// Image `NewsClipNonArticle`.
    static let newsClipNonArticle = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsClipNonArticle")
    /// Image `NewsSearchNonArticle`.
    static let newsSearchNonArticle = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsSearchNonArticle")
    /// Image `NewsTopTabClip`.
    static let newsTopTabClip = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsTopTabClip")
    /// Image `NewsTopTabEtc`.
    static let newsTopTabEtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsTopTabEtc")
    /// Image `NewsTopTabList`.
    static let newsTopTabList = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsTopTabList")
    /// Image `NewsTopTabSearch`.
    static let newsTopTabSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsTopTabSearch")
    /// Image `SpeechHigh`.
    static let speechHigh = Rswift.ImageResource(bundle: R.hostingBundle, name: "SpeechHigh")
    /// Image `SpeechLow`.
    static let speechLow = Rswift.ImageResource(bundle: R.hostingBundle, name: "SpeechLow")
    /// Image `SpeechQuick`.
    static let speechQuick = Rswift.ImageResource(bundle: R.hostingBundle, name: "SpeechQuick")
    /// Image `SpeechSlow`.
    static let speechSlow = Rswift.ImageResource(bundle: R.hostingBundle, name: "SpeechSlow")
    /// Image `TwitterCloseButton`.
    static let twitterCloseButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "TwitterCloseButton")
    /// Image `TwitterTweetButton`.
    static let twitterTweetButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "TwitterTweetButton")
    /// Image `WeatherBrokenCloudsDay`.
    static let weatherBrokenCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherBrokenCloudsDay")
    /// Image `WeatherBrokenCloudsNight`.
    static let weatherBrokenCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherBrokenCloudsNight")
    /// Image `WeatherClearSkyDay`.
    static let weatherClearSkyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherClearSkyDay")
    /// Image `WeatherClearSkyNight`.
    static let weatherClearSkyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherClearSkyNight")
    /// Image `WeatherFewCloudsDay`.
    static let weatherFewCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherFewCloudsDay")
    /// Image `WeatherFewCloudsNight`.
    static let weatherFewCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherFewCloudsNight")
    /// Image `WeatherMistDay`.
    static let weatherMistDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherMistDay")
    /// Image `WeatherMistNight`.
    static let weatherMistNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherMistNight")
    /// Image `WeatherRainDay`.
    static let weatherRainDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherRainDay")
    /// Image `WeatherRainNight`.
    static let weatherRainNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherRainNight")
    /// Image `WeatherScatteredCloudsDay`.
    static let weatherScatteredCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherScatteredCloudsDay")
    /// Image `WeatherScatteredCloudsNight`.
    static let weatherScatteredCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherScatteredCloudsNight")
    /// Image `WeatherShowerRainDay`.
    static let weatherShowerRainDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherShowerRainDay")
    /// Image `WeatherShowerRainNight`.
    static let weatherShowerRainNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherShowerRainNight")
    /// Image `WeatherSnowDay`.
    static let weatherSnowDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherSnowDay")
    /// Image `WeatherSnowNight`.
    static let weatherSnowNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherSnowNight")
    /// Image `WeatherThunderstormDay`.
    static let weatherThunderstormDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherThunderstormDay")
    /// Image `WeatherThunderstormNight`.
    static let weatherThunderstormNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeatherThunderstormNight")
    
    /// `UIImage(named: "ArticleDetailBackButton", bundle: ..., traitCollection: ...)`
    static func articleDetailBackButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleDetailBackButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArticleDetailClipOffButton", bundle: ..., traitCollection: ...)`
    static func articleDetailClipOffButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleDetailClipOffButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArticleDetailClipOnButton", bundle: ..., traitCollection: ...)`
    static func articleDetailClipOnButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleDetailClipOnButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArticleDetailShareButton", bundle: ..., traitCollection: ...)`
    static func articleDetailShareButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleDetailShareButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArticleDetailShareOpenSafari", bundle: ..., traitCollection: ...)`
    static func articleDetailShareOpenSafari(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleDetailShareOpenSafari, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArticleDetailTwitterButton", bundle: ..., traitCollection: ...)`
    static func articleDetailTwitterButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleDetailTwitterButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonArticlePlaceholder", bundle: ..., traitCollection: ...)`
    static func commonArticlePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonArticlePlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonNavigationTitle", bundle: ..., traitCollection: ...)`
    static func commonNavigationTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonNavigationTitle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonSpeechStop", bundle: ..., traitCollection: ...)`
    static func commonSpeechStop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonSpeechStop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EtcCacheClear", bundle: ..., traitCollection: ...)`
    static func etcCacheClear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etcCacheClear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EtcDispArticleNum", bundle: ..., traitCollection: ...)`
    static func etcDispArticleNum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etcDispArticleNum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EtcDispThumbnail", bundle: ..., traitCollection: ...)`
    static func etcDispThumbnail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etcDispThumbnail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EtcInquiry", bundle: ..., traitCollection: ...)`
    static func etcInquiry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etcInquiry, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EtcNextPage", bundle: ..., traitCollection: ...)`
    static func etcNextPage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etcNextPage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "EtcSpeech", bundle: ..., traitCollection: ...)`
    static func etcSpeech(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etcSpeech, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchScreenLogo", bundle: ..., traitCollection: ...)`
    static func launchScreenLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewsClipNonArticle", bundle: ..., traitCollection: ...)`
    static func newsClipNonArticle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsClipNonArticle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewsSearchNonArticle", bundle: ..., traitCollection: ...)`
    static func newsSearchNonArticle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsSearchNonArticle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewsTopTabClip", bundle: ..., traitCollection: ...)`
    static func newsTopTabClip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsTopTabClip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewsTopTabEtc", bundle: ..., traitCollection: ...)`
    static func newsTopTabEtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsTopTabEtc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewsTopTabList", bundle: ..., traitCollection: ...)`
    static func newsTopTabList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsTopTabList, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NewsTopTabSearch", bundle: ..., traitCollection: ...)`
    static func newsTopTabSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsTopTabSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SpeechHigh", bundle: ..., traitCollection: ...)`
    static func speechHigh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speechHigh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SpeechLow", bundle: ..., traitCollection: ...)`
    static func speechLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speechLow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SpeechQuick", bundle: ..., traitCollection: ...)`
    static func speechQuick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speechQuick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SpeechSlow", bundle: ..., traitCollection: ...)`
    static func speechSlow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speechSlow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TwitterCloseButton", bundle: ..., traitCollection: ...)`
    static func twitterCloseButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitterCloseButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TwitterTweetButton", bundle: ..., traitCollection: ...)`
    static func twitterTweetButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitterTweetButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherBrokenCloudsDay", bundle: ..., traitCollection: ...)`
    static func weatherBrokenCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherBrokenCloudsDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherBrokenCloudsNight", bundle: ..., traitCollection: ...)`
    static func weatherBrokenCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherBrokenCloudsNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherClearSkyDay", bundle: ..., traitCollection: ...)`
    static func weatherClearSkyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherClearSkyDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherClearSkyNight", bundle: ..., traitCollection: ...)`
    static func weatherClearSkyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherClearSkyNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherFewCloudsDay", bundle: ..., traitCollection: ...)`
    static func weatherFewCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherFewCloudsDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherFewCloudsNight", bundle: ..., traitCollection: ...)`
    static func weatherFewCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherFewCloudsNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherMistDay", bundle: ..., traitCollection: ...)`
    static func weatherMistDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherMistDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherMistNight", bundle: ..., traitCollection: ...)`
    static func weatherMistNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherMistNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherRainDay", bundle: ..., traitCollection: ...)`
    static func weatherRainDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherRainDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherRainNight", bundle: ..., traitCollection: ...)`
    static func weatherRainNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherRainNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherScatteredCloudsDay", bundle: ..., traitCollection: ...)`
    static func weatherScatteredCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherScatteredCloudsDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherScatteredCloudsNight", bundle: ..., traitCollection: ...)`
    static func weatherScatteredCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherScatteredCloudsNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherShowerRainDay", bundle: ..., traitCollection: ...)`
    static func weatherShowerRainDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherShowerRainDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherShowerRainNight", bundle: ..., traitCollection: ...)`
    static func weatherShowerRainNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherShowerRainNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherSnowDay", bundle: ..., traitCollection: ...)`
    static func weatherSnowDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherSnowDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherSnowNight", bundle: ..., traitCollection: ...)`
    static func weatherSnowNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherSnowNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherThunderstormDay", bundle: ..., traitCollection: ...)`
    static func weatherThunderstormDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherThunderstormDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WeatherThunderstormNight", bundle: ..., traitCollection: ...)`
    static func weatherThunderstormNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherThunderstormNight, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `EtcCell`.
    static let etcCell = _R.nib._EtcCell()
    /// Nib `EtcWeatherCell`.
    static let etcWeatherCell = _R.nib._EtcWeatherCell()
    /// Nib `MainCollectionViewCell`.
    static let mainCollectionViewCell = _R.nib._MainCollectionViewCell()
    /// Nib `NavigationTitleView`.
    static let navigationTitleView = _R.nib._NavigationTitleView()
    /// Nib `NewsListCell`.
    static let newsListCell = _R.nib._NewsListCell()
    /// Nib `SegmentCollectionViewCell`.
    static let segmentCollectionViewCell = _R.nib._SegmentCollectionViewCell()
    /// Nib `TweetCell`.
    static let tweetCell = _R.nib._TweetCell()
    
    /// `UINib(name: "EtcCell", in: bundle)`
    static func etcCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.etcCell)
    }
    
    /// `UINib(name: "EtcWeatherCell", in: bundle)`
    static func etcWeatherCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.etcWeatherCell)
    }
    
    /// `UINib(name: "MainCollectionViewCell", in: bundle)`
    static func mainCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainCollectionViewCell)
    }
    
    /// `UINib(name: "NavigationTitleView", in: bundle)`
    static func navigationTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.navigationTitleView)
    }
    
    /// `UINib(name: "NewsListCell", in: bundle)`
    static func newsListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsListCell)
    }
    
    /// `UINib(name: "SegmentCollectionViewCell", in: bundle)`
    static func segmentCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.segmentCollectionViewCell)
    }
    
    /// `UINib(name: "TweetCell", in: bundle)`
    static func tweetCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tweetCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EtcCell`.
    static let etcCell: Rswift.ReuseIdentifier<EtcCell> = Rswift.ReuseIdentifier(identifier: "EtcCell")
    /// Reuse identifier `EtcWeatherCell`.
    static let etcWeatherCell: Rswift.ReuseIdentifier<EtcWeatherCell> = Rswift.ReuseIdentifier(identifier: "EtcWeatherCell")
    /// Reuse identifier `MainCollectionViewCell`.
    static let mainCollectionViewCell: Rswift.ReuseIdentifier<MainCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MainCollectionViewCell")
    /// Reuse identifier `NewsListCell`.
    static let newsListCell: Rswift.ReuseIdentifier<NewsListCell> = Rswift.ReuseIdentifier(identifier: "NewsListCell")
    /// Reuse identifier `SegmentCollectionViewCell`.
    static let segmentCollectionViewCell: Rswift.ReuseIdentifier<SegmentCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SegmentCollectionViewCell")
    /// Reuse identifier `TweetCell`.
    static let tweetCell: Rswift.ReuseIdentifier<TweetCell> = Rswift.ReuseIdentifier(identifier: "TweetCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `EtcViewController`, and contains static references to 1 segues.
    struct etcViewController {
      /// Segue identifier `SpeechSetting`.
      static let speechSetting: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EtcViewController, SpeechSettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SpeechSetting")
      
      /// Optionally returns a typed version of segue `SpeechSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func speechSetting(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EtcViewController, SpeechSettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.etcViewController.speechSetting, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NewsClipViewController`, and contains static references to 1 segues.
    struct newsClipViewController {
      /// Segue identifier `ArticleDetail`.
      static let articleDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NewsClipViewController, ArticleDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ArticleDetail")
      
      /// Optionally returns a typed version of segue `ArticleDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func articleDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NewsClipViewController, ArticleDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.newsClipViewController.articleDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NewsSearchViewController`, and contains static references to 1 segues.
    struct newsSearchViewController {
      /// Segue identifier `ArticleDetail`.
      static let articleDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NewsSearchViewController, ArticleDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ArticleDetail")
      
      /// Optionally returns a typed version of segue `ArticleDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func articleDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NewsSearchViewController, ArticleDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.newsSearchViewController.articleDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UpTabViewController`, and contains static references to 1 segues.
    struct upTabViewController {
      /// Segue identifier `ArticleDetail`.
      static let articleDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UpTabViewController, ArticleDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ArticleDetail")
      
      /// Optionally returns a typed version of segue `ArticleDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func articleDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UpTabViewController, ArticleDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.upTabViewController.articleDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `ArticleDetail`.
    static let articleDetail = _R.storyboard.articleDetail()
    /// Storyboard `Etc`.
    static let etc = _R.storyboard.etc()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewsClip`.
    static let newsClip = _R.storyboard.newsClip()
    /// Storyboard `NewsList`.
    static let newsList = _R.storyboard.newsList()
    /// Storyboard `NewsSearch`.
    static let newsSearch = _R.storyboard.newsSearch()
    /// Storyboard `NewsTop`.
    static let newsTop = _R.storyboard.newsTop()
    /// Storyboard `SpeechSetting`.
    static let speechSetting = _R.storyboard.speechSetting()
    /// Storyboard `Twitter`.
    static let twitter = _R.storyboard.twitter()
    /// Storyboard `UpTabViewController`.
    static let upTabViewController = _R.storyboard.upTabViewController()
    
    /// `UIStoryboard(name: "ArticleDetail", bundle: ...)`
    static func articleDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.articleDetail)
    }
    
    /// `UIStoryboard(name: "Etc", bundle: ...)`
    static func etc(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.etc)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "NewsClip", bundle: ...)`
    static func newsClip(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsClip)
    }
    
    /// `UIStoryboard(name: "NewsList", bundle: ...)`
    static func newsList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsList)
    }
    
    /// `UIStoryboard(name: "NewsSearch", bundle: ...)`
    static func newsSearch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsSearch)
    }
    
    /// `UIStoryboard(name: "NewsTop", bundle: ...)`
    static func newsTop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsTop)
    }
    
    /// `UIStoryboard(name: "SpeechSetting", bundle: ...)`
    static func speechSetting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.speechSetting)
    }
    
    /// `UIStoryboard(name: "Twitter", bundle: ...)`
    static func twitter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.twitter)
    }
    
    /// `UIStoryboard(name: "UpTabViewController", bundle: ...)`
    static func upTabViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.upTabViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 26 localization keys.
    struct localizable {
      /// Value: 
      static let emptyString = Rswift.StringResource(key: "EmptyString", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: いいえ
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: この位置から聞く
      static let articleLongPressSpeechStart = Rswift.StringResource(key: "ArticleLongPressSpeechStart", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: この記事はあなたが初めて注目しました。
      static let detailAttentionFirst = Rswift.StringResource(key: "DetailAttentionFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: この音声でご案内します
      static let speechSettingConfirm = Rswift.StringResource(key: "SpeechSettingConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: これでニュースの読み上げを終わります
      static let speechEnd = Rswift.StringResource(key: "SpeechEnd", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: はい
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: キャッシュをクリアしました。
      static let etcClearCacheAfterMessage = Rswift.StringResource(key: "EtcClearCacheAfterMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: キャンセル
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ニュースを読み上げます
      static let speechStart = Rswift.StringResource(key: "SpeechStart", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 人の方が この記事に注目しています！
      static let detailAttentionMoreAfter = Rswift.StringResource(key: "DetailAttentionMoreAfter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 他に
      static let detailAttentionMoreBefore = Rswift.StringResource(key: "DetailAttentionMoreBefore", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 内部キャッシュをクリアします。 よろしいですか？ キャッシュをクリアすると内部で保持している記事画像が削除されます。
      static let etcClearCacheBeforeMessage = Rswift.StringResource(key: "EtcClearCacheBeforeMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 再度データをダウンロードします。電波が届いていることを確認してOKボタンを押してください。
      static let initActErrorMessage = Rswift.StringResource(key: "InitActErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 推奨
      static let etcWeatherLocationAuthorizationTitle = Rswift.StringResource(key: "EtcWeatherLocationAuthorizationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 次です
      static let speechNextArticle = Rswift.StringResource(key: "SpeechNextArticle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 現在地の天気を取得するには、[設定]->[イノービィ]->[位置情報]から位置情報の利用を許可してください。
      static let etcWeatherLocationAuthorizationMessage = Rswift.StringResource(key: "EtcWeatherLocationAuthorizationMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 確認
      static let etcClearCacheBeforeTitle = Rswift.StringResource(key: "EtcClearCacheBeforeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 記事をクリップしました。
      static let detailOnClip = Rswift.StringResource(key: "DetailOnClip", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 詳細を見る
      static let articleLongPressToDetail = Rswift.StringResource(key: "ArticleLongPressToDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通信エラー
      static let detailNetworkErrorTitle = Rswift.StringResource(key: "DetailNetworkErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通信エラー
      static let initActErrorTitle = Rswift.StringResource(key: "InitActErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通信状況を確認してもう一度記事をタップしてください。
      static let detailNetworkErrorMessage = Rswift.StringResource(key: "DetailNetworkErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 選択してください
      static let articleLongPressTitle = Rswift.StringResource(key: "ArticleLongPressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 閉じる
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: 
      static func emptyString(_: Void = ()) -> String {
        return NSLocalizedString("EmptyString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: いいえ
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: この位置から聞く
      static func articleLongPressSpeechStart(_: Void = ()) -> String {
        return NSLocalizedString("ArticleLongPressSpeechStart", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: この記事はあなたが初めて注目しました。
      static func detailAttentionFirst(_: Void = ()) -> String {
        return NSLocalizedString("DetailAttentionFirst", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: この音声でご案内します
      static func speechSettingConfirm(_: Void = ()) -> String {
        return NSLocalizedString("SpeechSettingConfirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: これでニュースの読み上げを終わります
      static func speechEnd(_: Void = ()) -> String {
        return NSLocalizedString("SpeechEnd", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: はい
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: キャッシュをクリアしました。
      static func etcClearCacheAfterMessage(_: Void = ()) -> String {
        return NSLocalizedString("EtcClearCacheAfterMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: キャンセル
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ニュースを読み上げます
      static func speechStart(_: Void = ()) -> String {
        return NSLocalizedString("SpeechStart", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 人の方が この記事に注目しています！
      static func detailAttentionMoreAfter(_: Void = ()) -> String {
        return NSLocalizedString("DetailAttentionMoreAfter", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 他に
      static func detailAttentionMoreBefore(_: Void = ()) -> String {
        return NSLocalizedString("DetailAttentionMoreBefore", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 内部キャッシュをクリアします。 よろしいですか？ キャッシュをクリアすると内部で保持している記事画像が削除されます。
      static func etcClearCacheBeforeMessage(_: Void = ()) -> String {
        return NSLocalizedString("EtcClearCacheBeforeMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 再度データをダウンロードします。電波が届いていることを確認してOKボタンを押してください。
      static func initActErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("InitActErrorMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 推奨
      static func etcWeatherLocationAuthorizationTitle(_: Void = ()) -> String {
        return NSLocalizedString("EtcWeatherLocationAuthorizationTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 次です
      static func speechNextArticle(_: Void = ()) -> String {
        return NSLocalizedString("SpeechNextArticle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 現在地の天気を取得するには、[設定]->[イノービィ]->[位置情報]から位置情報の利用を許可してください。
      static func etcWeatherLocationAuthorizationMessage(_: Void = ()) -> String {
        return NSLocalizedString("EtcWeatherLocationAuthorizationMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 確認
      static func etcClearCacheBeforeTitle(_: Void = ()) -> String {
        return NSLocalizedString("EtcClearCacheBeforeTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 記事をクリップしました。
      static func detailOnClip(_: Void = ()) -> String {
        return NSLocalizedString("DetailOnClip", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 詳細を見る
      static func articleLongPressToDetail(_: Void = ()) -> String {
        return NSLocalizedString("ArticleLongPressToDetail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通信エラー
      static func detailNetworkErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("DetailNetworkErrorTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通信エラー
      static func initActErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("InitActErrorTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通信状況を確認してもう一度記事をタップしてください。
      static func detailNetworkErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("DetailNetworkErrorMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 選択してください
      static func articleLongPressTitle(_: Void = ()) -> String {
        return NSLocalizedString("ArticleLongPressTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 閉じる
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("Close", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _EtcCell.validate()
      try _NavigationTitleView.validate()
    }
    
    struct _EtcCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EtcCell
      
      let bundle = R.hostingBundle
      let identifier = "EtcCell"
      let name = "EtcCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EtcCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EtcCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "EtcInquiry", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EtcInquiry' is used in nib 'EtcCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "EtcNextPage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EtcNextPage' is used in nib 'EtcCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EtcWeatherCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EtcWeatherCell
      
      let bundle = R.hostingBundle
      let identifier = "EtcWeatherCell"
      let name = "EtcWeatherCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EtcWeatherCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EtcWeatherCell
      }
      
      fileprivate init() {}
    }
    
    struct _MainCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MainCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MainCollectionViewCell"
      let name = "MainCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MainCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NavigationTitleView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NavigationTitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NavigationTitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NavigationTitleView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CommonNavigationTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonNavigationTitle' is used in nib 'NavigationTitleView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NewsListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewsListCell
      
      let bundle = R.hostingBundle
      let identifier = "NewsListCell"
      let name = "NewsListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NewsListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsListCell
      }
      
      fileprivate init() {}
    }
    
    struct _SegmentCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SegmentCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SegmentCollectionViewCell"
      let name = "SegmentCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SegmentCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SegmentCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TweetCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TweetCell
      
      let bundle = R.hostingBundle
      let identifier = "TweetCell"
      let name = "TweetCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TweetCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TweetCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try upTabViewController.validate()
      try speechSetting.validate()
      try newsSearch.validate()
      try articleDetail.validate()
      try etc.validate()
      try newsList.validate()
      try newsClip.validate()
      try twitter.validate()
      try launchScreen.validate()
    }
    
    struct articleDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ArticleDetailViewController
      
      let bundle = R.hostingBundle
      let name = "ArticleDetail"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ArticleDetailTwitterButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArticleDetailTwitterButton' is used in storyboard 'ArticleDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArticleDetailShareButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArticleDetailShareButton' is used in storyboard 'ArticleDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArticleDetailClipOnButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArticleDetailClipOnButton' is used in storyboard 'ArticleDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArticleDetailBackButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArticleDetailBackButton' is used in storyboard 'ArticleDetail', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct etc: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Etc"
      
      static func validate() throws {
        if UIKit.UIImage(named: "NewsTopTabEtc") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsTopTabEtc' is used in storyboard 'Etc', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreenLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreenLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsClip: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "NewsClip"
      
      static func validate() throws {
        if UIKit.UIImage(named: "NewsClipNonArticle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsClipNonArticle' is used in storyboard 'NewsClip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NewsTopTabClip") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsTopTabClip' is used in storyboard 'NewsClip', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewsListViewController
      
      let bundle = R.hostingBundle
      let name = "NewsList"
      let newsList = StoryboardViewControllerResource<NewsListViewController>(identifier: "NewsList")
      
      func newsList(_: Void = ()) -> NewsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsList)
      }
      
      static func validate() throws {
        if _R.storyboard.newsList().newsList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsList' could not be loaded from storyboard 'NewsList' as 'NewsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsSearch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "NewsSearch"
      
      static func validate() throws {
        if UIKit.UIImage(named: "NewsSearchNonArticle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsSearchNonArticle' is used in storyboard 'NewsSearch', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NewsTopTabSearch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsTopTabSearch' is used in storyboard 'NewsSearch', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsTop: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = NewsTopTabBarController
      
      let bundle = R.hostingBundle
      let name = "NewsTop"
      
      fileprivate init() {}
    }
    
    struct speechSetting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SpeechSettingViewController
      
      let bundle = R.hostingBundle
      let name = "SpeechSetting"
      
      static func validate() throws {
        if UIKit.UIImage(named: "SpeechHigh") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SpeechHigh' is used in storyboard 'SpeechSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SpeechSlow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SpeechSlow' is used in storyboard 'SpeechSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SpeechLow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SpeechLow' is used in storyboard 'SpeechSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SpeechQuick") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SpeechQuick' is used in storyboard 'SpeechSetting', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct twitter: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Twitter"
      let twitter = StoryboardViewControllerResource<TwitterViewController>(identifier: "Twitter")
      
      func twitter(_: Void = ()) -> TwitterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: twitter)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TwitterCloseButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TwitterCloseButton' is used in storyboard 'Twitter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TwitterTweetButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TwitterTweetButton' is used in storyboard 'Twitter', but couldn't be loaded.") }
        if _R.storyboard.twitter().twitter() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'twitter' could not be loaded from storyboard 'Twitter' as 'TwitterViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct upTabViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "UpTabViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "CommonSpeechStop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonSpeechStop' is used in storyboard 'UpTabViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NewsTopTabList") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsTopTabList' is used in storyboard 'UpTabViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
